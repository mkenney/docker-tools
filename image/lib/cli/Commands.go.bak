package cli

import (
    "errors"
    "fmt"
    "os"
    "strings"
)

/**
 * CliCommands is an unordered collection of Command structs. An ordered index
 * (CliCommandsIndex) is provided.
 *
 * A Command is a named collection of command line options and flags groupped
 * by the preceeding CLI argument.
 *
 *     - An argument is defined as a CLI input that does not begin with a dash ('-').
 *     - An option is a CLI input that begins with '--' (excluding '---') and is expected to be
 *       'key=value' strings
 *     - A flag is a CLI input that begins with '-' (including '---') and is is a boolean (was
 *       either passed in or not)
 *         An input that begins with '---' will be parsed into a flag '--%restofinput'
 *
 * Command.Name  - command name
 * Command.Opts  - map of option:value
 * Command.flags - map of flag:true
 *
 * available Command methds:
 *     command.HasFlag(flag string) bool:
 *     command.HasOpt(name string) bool:
 *     command.GetOpt(name string) string:
 */
type CliCommands map[string]Command
type CliCommandsIndex map[int]string

/**
 * Shift the first argument out of the stack
 */
func (this CliCommands) Shift() (Command, error) {
    var ret_val Command
    var ret_err error

    a := 0
    for {
        if val, ok := this[CommandIndex[a]]; !ok {
            ret_err = errors.New(fmt.Sprintf("Index not set: %v", a))

        } else {
            ret_val = val
            delete(this, val.Name)
            delete(CommandIndex, a)

            // Shift the index too...
            b := a
            for {
                if cmd, ok := CommandIndex[b+1]; ok {
                    CommandIndex[b] = cmd
                    delete(CommandIndex, b+1)
                    b++

                } else {
                    break
                }
            }
            break
        }
    }

    return ret_val, ret_err
}

/**
 * Commands instance factory...
 */
func cliCommandsFactory(args []string) (CliCommands, CliCommandsIndex) {
    ret_map := make(CliCommands)
    ret_idx := make(CliCommandsIndex)
    map_idx := 0

    // args[0] includes the absolute path
    arg_parts := strings.Split(args[0], "/")
    var command string = arg_parts[len(arg_parts) - 1]

    flags := make(map[string]bool)
    opts  := make(map[string]string)

    for _, arg := range args[1:] {

        // begins with -- is an opt
        if strings.HasPrefix(arg, "--") && !strings.HasPrefix(arg, "---") {
            opt := strings.Split(arg[2:], "=")
            if 1 == len(opt) {
                opts[opt[0]] = ""
            } else {
                opts[opt[0]] = opt[1]
            }

        // begins with - or --- is a flag
        } else if strings.HasPrefix(arg, "---"); strings.HasPrefix(arg, "-") {
            flags[arg[1:]] = true

        // is a command
        } else {
            ret_map[command] = Command{command, opts, flags}
            ret_idx[map_idx] = command
            map_idx++

            opts = make(map[string]string)
            flags = make(map[string]bool)

            command = arg
        }
    }

    ret_map[command] = Command{command, opts, flags}
    ret_idx[map_idx] = command

    return ret_map, ret_idx
}

var (
    Commands CliCommands
    CommandIndex CliCommandsIndex
)

func init() {
    Commands, CommandIndex = cliCommandsFactory(os.Args)
}
